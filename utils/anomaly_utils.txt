import numpy as np
import tensorflow as tf

def build_autoencoder(input_shape=(128,128,3), latent_dim=64):
    inputs = tf.keras.Input(shape=input_shape)
    x = tf.keras.layers.Conv2D(32,3,activation='relu',padding='same')(inputs)
    x = tf.keras.layers.MaxPool2D()(x)
    x = tf.keras.layers.Conv2D(64,3,activation='relu',padding='same')(x)
    x = tf.keras.layers.MaxPool2D()(x)
    x = tf.keras.layers.Flatten()(x)
    latent = tf.keras.layers.Dense(latent_dim, activation='relu')(x)
    x = tf.keras.layers.Dense(64*64*64, activation='relu')(latent)
    x = tf.keras.layers.Reshape((64,64,64))(x)
    x = tf.keras.layers.UpSampling2D()(x)
    x = tf.keras.layers.Conv2DTranspose(32,3,activation='relu',padding='same')(x)
    x = tf.keras.layers.UpSampling2D()(x)
    outputs = tf.keras.layers.Conv2D(3,3,activation='sigmoid',padding='same')(x)
    return tf.keras.Model(inputs, outputs)

def train_autoencoder(model, X, epochs=20, batch_size=32, validation_split=0.1):
    model.compile(optimizer='adam', loss='mse')
    return model.fit(X, X,
                     epochs=epochs,
                     batch_size=batch_size,
                     validation_split=validation_split)

def compute_anomaly_scores(model, X):
    recon = model.predict(X)
    return np.mean(np.square(X - recon), axis=(1,2,3))